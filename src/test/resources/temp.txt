package org.example;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.*;

public class ExcelToJson {
    public static void main(String[] args) {
        String excelFilePath = "D:\\UserData\\Documents\\GitHub\\maventest\\src\\main\\resources\\libroexcel.xlsx";
        Map<String, Object> excelData = readExcelFile(excelFilePath);
        String json = convertToJson(excelData);
        System.out.println(json);
    }

    private static Map<String, Object> readExcelFile(String filePath) {
        Map<String, Object> excelData = new LinkedHashMap<>();
        try (FileInputStream fis = new FileInputStream(filePath);
             Workbook workbook = new XSSFWorkbook(fis)) {

            Sheet sheet = workbook.getSheetAt(0);

            // Read headers
            Row headerRow = sheet.getRow(0);
            Row dataRow = sheet.getRow(1);

            for (int cellIndex = 3; cellIndex < headerRow.getLastCellNum(); cellIndex++) {
                String header = getCellValueAsString(headerRow.getCell(cellIndex));
                String data = getCellValueAsString(dataRow.getCell(cellIndex));

                if (!header.isEmpty() && !data.isEmpty()) {
                    excelData.put(header, data);
                }
            }

        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }

        return excelData;
    }

    private static String getCellValueAsString(Cell cell) {
        if (cell == null) return "";
        switch (cell.getCellType()) {
            case STRING:
                return cell.getStringCellValue();
            case NUMERIC:
                if (DateUtil.isCellDateFormatted(cell)) {
                    return cell.getDateCellValue().toString();
                } else {
                    return String.valueOf((int) cell.getNumericCellValue());
                }
            case BOOLEAN:
                return Boolean.toString(cell.getBooleanCellValue());
            case FORMULA:
                try {
                    return cell.getCellFormula();
                } catch (Exception e) {
                    return "";
                }
            default:
                return "";
        }
    }

    private static String convertToJson(Map<String, Object> data) {
        Gson gson = new GsonBuilder().setPrettyPrinting().create();
        return gson.toJson(data);
    }
}
