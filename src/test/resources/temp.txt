package starter;

import io.cucumber.junit.CucumberOptions;
import net.serenitybdd.cucumber.CucumberWithSerenity;
import org.junit.BeforeClass;
import org.junit.runner.RunWith;


import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;

@RunWith(CucumberTestSuite.class)
@CucumberOptions(
        features = "src/test/resources/features",
        glue = "starter.stepdefinitions"
)
public class CucumberTestSuite extends CucumberWithSerenity {

    public CucumberTestSuite(Class clazz) throws Exception {
        super(clazz);
        // Puedes agregar lógica adicional aquí si es necesario
    }

    @BeforeClass
    public static void setup() {
        try {
            // Llama al método que escribe o modifica los archivos .feature
            prepareFeatureFiles();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static void prepareFeatureFiles() throws Exception {
        // Lógica para escribir o modificar los archivos .feature
        // Por ejemplo, podrías copiar un archivo temporal a la ubicación deseada

        String sourcePath = "src/test/resources/features/search/search_by_keyword.feature";
        String destinationPath = "src/test/resources/features/search/search_by_keyword.temp";

        Files.copy(Paths.get(sourcePath), Paths.get(destinationPath), StandardCopyOption.REPLACE_EXISTING);

        // O también puedes leer datos de un Excel y escribirlos en los archivos .feature
        // Implementa aquí la lógica necesaria para manipular los archivos .feature
    }
}
