package org.example;

import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.json.JSONArray;
import org.json.JSONObject;

import java.io.FileInputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class ExcelToJson {
    private Workbook workbook;
    private static Sheet sheet;
    private JSONObject jsonObject;

    public JSONObject getJsonObject() {
        return jsonObject;
    }

    public ExcelToJson(String filePath, String sheetname) throws IOException {
        this.workbook = new XSSFWorkbook(new FileInputStream(filePath));
        this.sheet = workbook.getSheet(sheetname);
        this.jsonObject = new JSONObject();
    }
    public static   void main(String[] args) {
        String file="D:\\UserData\\Downloads\\MOCK_DATA.xlsx";

        try {
          ExcelToJson excelToJson = new ExcelToJson(file,"prueba");
            excelToJson.addSimpleElements("TestData");
            excelToJson.processArray("ABC",new String[] {"SubArray1a","SubArray2a","SubArra3"});

          excelToJson.processArray("heidy",null);
           excelToJson.processArray("Tesr",new String[] {"prueba2","prueba1"});



            JSONArray array=new JSONArray();
            array.put(excelToJson.jsonObject);

            System.out.println(array.toString(4));
        }
        catch (Exception e) {
            e.printStackTrace();
        }



    }





   private  void processArray( String mainkeyname, String[] subarrays){
        Map<String, String> subArrayMappings = new HashMap<>();
        JSONArray jsonArray = new JSONArray();
        if(subarrays!=null){
            for (int i = 0; i < subarrays.length; i++) {
                subArrayMappings.put(subarrays[i],subarrays[i]);
            }

        }
        try {
            jsonArray= processExcelFile(mainkeyname, subArrayMappings);
            jsonObject.put(mainkeyname,jsonArray);
        } catch (IOException e) {
            e.printStackTrace();
        }

    }
    private  JSONArray processExcelFile(String mainKeyName, Map<String, String> subArrayMappings) throws IOException {


            int[] rowRange = findRowRangeForMainKey(sheet, mainKeyName);
            System.out.println("Row Range: " + rowRange[0] + " - " + rowRange[1]);

            JSONArray jsonArray = processExcelData(sheet, rowRange[0], rowRange[1], mainKeyName, subArrayMappings);
            if (jsonArray.isEmpty()) {
                System.out.println("No data found for the given main key.");
            }
            return jsonArray;

    }
    private static boolean isPartOfArray(String key, Map<String, String> subArrayMappings) {

        for (Map.Entry<String, String> entry : subArrayMappings.entrySet()) {

            if (key != null && key.startsWith(entry.getKey() + ".")) {
                return true;
            }
        }
        return false; // La clave no es parte de ningún array
    }
    private static int[] findRowRangeForMainKey(Sheet sheet, String mainKeyName) {
        int startRow = findCellValue(sheet, mainKeyName);
        int endRow = findCellValue(sheet, "END-" + mainKeyName)+1;

        if (startRow == -1) startRow = 0;
        if (endRow == -1) endRow = sheet.getLastRowNum();

        return new int[]{startRow, endRow};
    }

    private static int findCellValue(Sheet sheet, String searchString) {
        for (Row row : sheet) {
            for (Cell cell : row) {
                if (cell.getCellType() == CellType.STRING && cell.getStringCellValue().equals(searchString)) {
                    return row.getRowNum()-1;
                }
            }
        }
        return -1;
    }

    private static JSONArray processExcelData(Sheet sheet, int startRow, int endRow, String mainKeyName, Map<String, String> subArrayMappings) {
       // JSONArray finalJsonArray = new JSONArray();
        JSONArray mainJsonObject = processMainKey(sheet, startRow, endRow, mainKeyName, subArrayMappings);

        return mainJsonObject;
    }

    private static JSONArray processMainKey(Sheet sheet, int startRow, int endRow, String mainKeyName, Map<String, String> subArrayMappings) {
        JSONArray mainArray = new JSONArray();
        String currentMainKey = null;
        boolean mainKeyAdded = false; // Flag to ensure mainKeyName is added only once

        for (int i = startRow; i <= endRow; i++) {
            Row row = sheet.getRow(i);
            if (row == null) continue; // Skip empty rows

            JSONObject sectionObject = new JSONObject();
            Map<String, JSONArray> subArrays = new HashMap<>();
            boolean isRowEmpty = true;

            for (Cell cell : row) {
                String key = getHeaderName(sheet, cell.getColumnIndex(), startRow);
                Object value = getCellValue(cell);

                // Debugging
                System.out.println("Row " + i + ", Column " + cell.getColumnIndex() + ": Key = " + key + ", Value = " + value);

                if (isMainKeyRow(key, value, mainKeyName)) {
                    if (!mainKeyAdded) {
                        currentMainKey = mainKeyName;
                        mainKeyAdded = true;
                    }
                    continue;
                }

                if (isEndRow(value, currentMainKey)) {
                    currentMainKey = null;
                    mainKeyAdded = false;
                    break;
                }

                if (value != null && !value.toString().isBlank()) {
                    isRowEmpty = false;
                }

                processSubArrays(subArrayMappings, key, value, subArrays);

                // Verificar si la clave está en los subarrays
                if (key != null && !key.startsWith("MainKey-") && !isPartOfArray(key, subArrayMappings)) {
                    sectionObject.put(key, value);
                }
            }

            if (!isRowEmpty && currentMainKey != null) {
                addSubArraysToSectionObject(subArrays, sectionObject);
                mainArray.put(sectionObject);
            }
        }

        return mainArray;
    }

    private static boolean isMainKeyRow(String key, Object value, String mainKeyName) {
        return key != null && key.startsWith("MainKey-") && value != null && value.toString().equals(mainKeyName);
    }

    private static boolean isEndRow(Object value, String currentMainKey) {
        return value != null && currentMainKey != null && value.toString().equals("END-" + currentMainKey);
    }

    private static void processSubArrays(Map<String, String> subArrayMappings, String key, Object value, Map<String, JSONArray> subArrays) {
        for (String subArrayKey : subArrayMappings.keySet()) {
            if (key != null && key.startsWith(subArrayKey)) {
                String dynamicArrayName = subArrayMappings.get(subArrayKey);
                JSONArray subArray = subArrays.computeIfAbsent(dynamicArrayName, k -> new JSONArray());
                JSONObject subObject = new JSONObject();
                subObject.put(key.replace(subArrayKey + ".", ""), value);
                subArray.put(subObject);
                subArrays.put(dynamicArrayName, subArray);
                return;
            }
        }
    }

    private static void addSubArraysToSectionObject(Map<String, JSONArray> subArrays, JSONObject sectionObject) {
        for (Map.Entry<String, JSONArray> subArrayEntry : subArrays.entrySet()) {
            sectionObject.put(subArrayEntry.getKey(), subArrayEntry.getValue());
        }
    }

    private static String getHeaderName(Sheet sheet, int columnIndex, int headerRowNumber) {
        Row headerRow = sheet.getRow(headerRowNumber);
        if (headerRow != null) {
            Cell headerCell = headerRow.getCell(columnIndex);
            if (headerCell != null) {
                return headerCell.getStringCellValue();
            }
        }
        return null;
    }

    private  void addSimpleElements( String startRowName) {

        int startRowIndex = -1;
        int headerRowIndex = -1;

        // Find the row with startRowName ("TestData")
        for (int i = 0; i <= sheet.getLastRowNum(); i++) {
            Row row = sheet.getRow(i);
            if (row != null) {
                for (Cell cell : row) {
                    if (cell.getCellType() == CellType.STRING && cell.getStringCellValue().equalsIgnoreCase(startRowName)) {
                        startRowIndex = i;
                        headerRowIndex = i + 1;
                        break;
                    }
                }
                if (startRowIndex != -1) {
                    break;
                }
            }
        }


        if (startRowIndex != -1 && headerRowIndex <= sheet.getLastRowNum()) {
            Row headerRow = sheet.getRow(headerRowIndex);
            Row dataRow = sheet.getRow(headerRowIndex + 1);

            if (headerRow != null && dataRow != null) {
                for (int i = 0; i < headerRow.getLastCellNum(); i++) {
                    String header = headerRow.getCell(i).getStringCellValue();
                    Cell dataCell = dataRow.getCell(i);
                    Object value = getCellValue(dataCell);
                    jsonObject.put(header, value);

                }
            }
        }


    }


    private static Object getCellValue(Cell cell) {
        if (cell == null) {
            return null;
        }

        switch (cell.getCellType()) {
            case STRING:
                return cell.getStringCellValue().trim();
            case NUMERIC:
                return cell.getNumericCellValue();
            case BOOLEAN:
                return cell.getBooleanCellValue();
            default:
                return null;
        }
    }
}
