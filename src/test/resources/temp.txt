package org.example;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.*;

public class ExcelToJson {
    private final Map<String, Object> jsonData = new LinkedHashMap<>();
    private final Workbook workbook;
    private final Sheet sheet;

    public ExcelToJson(String filePath) throws IOException {
        FileInputStream file = new FileInputStream(new File(filePath));
        this.workbook = new XSSFWorkbook(file);
        this.sheet = workbook.getSheetAt(0);
    }

    public void readGeneralData() {
        Map<String, String> generalData = new LinkedHashMap<>();
        Row headersRow = sheet.getRow(1);
        Row valuesRow = sheet.getRow(2);

        if (headersRow == null || valuesRow == null) {
            System.out.println("No se encontraron filas de datos generales.");
            return;
        }

        for (int i = 0; i < headersRow.getLastCellNum(); i++) {
            Cell headerCell = headersRow.getCell(i);
            Cell valueCell = valuesRow.getCell(i);

            if (headerCell != null && valueCell != null) {
                String header = headerCell.getStringCellValue().trim();
                String value = valueCell.getStringCellValue().trim();
                if (!header.isEmpty() && !value.isEmpty()) {
                    generalData.put(header, value);
                    } else if (!header.isEmpty()&&value.isBlank()) {
                    generalData.put(header, "");
                }
            }
        }

        jsonData.putAll(generalData);
    }
    // Método para agregar un elemento con solo propiedades y sin hijos
    // Método para agregar un elemento con solo propiedades y sin hijos al jsonData
    private void addElementWithPropertiesToJson(String elementName, String terminator) {
        Map<String, Object> elementData = new LinkedHashMap<>();
        boolean readingElement = false;

        for (int currentRowIndex = 0; currentRowIndex < sheet.getPhysicalNumberOfRows(); currentRowIndex++) {
            Row row = sheet.getRow(currentRowIndex);
            if (row != null && row.getCell(0) != null) {
                String cellValue = row.getCell(0).getStringCellValue().trim();

                // Verificar si estamos en la sección del elemento que queremos leer
                if (elementName.equals(cellValue)) {
                    readingElement = true;
                    currentRowIndex++;
                    Row headerRow = sheet.getRow(currentRowIndex++);
                    Row dataRow = sheet.getRow(currentRowIndex++);

                    // Leer las propiedades del elemento
                    Map<String, Object> properties = new LinkedHashMap<>();
                    for (int i = 0; i < dataRow.getLastCellNum(); i++) {
                        Cell headerCell = headerRow.getCell(i);
                        String header = headerCell != null ? headerCell.getStringCellValue().trim() : "";
                        Cell dataCell = dataRow.getCell(i);
                        String value = dataCell != null ? dataCell.getStringCellValue().trim() : "";
                        if (!header.isEmpty() && !value.isEmpty()) {
                            properties.put(header, value);
                        }
                    }

                    // Agregar el elemento con propiedades al jsonData
                    jsonData.put(elementName, properties);

                    // Terminamos la lectura después de encontrar el elemento
                    return;
                }

                // Si estamos leyendo el elemento y encontramos el terminador, dejamos de leer
                if (readingElement && terminator.equals(cellValue)) {
                    break;
                }
            }
        }

        // Si no se encontró el elemento, no hacemos nada (jsonData no se actualiza)
    }


    private void addNestedElement(String sectionName, String arrayStartMarker, String subArrayMarker, String subArrayEndMarker, String arrayEndMarker, String terminator) {
        Map<String, Object> nestedElementData = null;
        List<Map<String, Object>> itemList = null;
        List<Map<String, Object>> subArrayList = null;
        String currentSubArrayName = null;
        Row headerRow = null;
        Map<Integer, String> arrayHeaders = null; // Para guardar los encabezados del array
        boolean insideArray = false;
        boolean insideSubArray = false;

        for (int currentRowIndex = 0; currentRowIndex < sheet.getPhysicalNumberOfRows(); currentRowIndex++) {
            Row row = sheet.getRow(currentRowIndex);
            if (row != null && row.getCell(0) != null) {
                String cellValue = row.getCell(0).getStringCellValue().trim();

                if (sectionName.equals(cellValue)) {
                    nestedElementData = new LinkedHashMap<>();
                    itemList = new ArrayList<>();
                    currentRowIndex++;
                    headerRow = sheet.getRow(currentRowIndex);
                    continue;
                }

                if (nestedElementData != null) {
                    if (arrayStartMarker.equals(cellValue)) {
                        insideArray = true;
                        itemList = new ArrayList<>();
                        arrayHeaders = new LinkedHashMap<>(); // Inicializar arrayHeaders
                        currentRowIndex++; // Move to the header row of the array
                        headerRow = sheet.getRow(currentRowIndex);
                        // Guardar encabezados del primer valor del array
                        for (int i = 0; i < headerRow.getLastCellNum(); i++) {
                            Cell headerCell = headerRow.getCell(i);
                            String header = headerCell != null ? headerCell.getStringCellValue().trim() : "";
                            if (!header.isEmpty()) {
                                arrayHeaders.put(i, header);
                            }
                        }
                        continue;
                    }

                    if (insideArray) {
                        if (subArrayMarker.equals(cellValue)) {
                            insideSubArray = true;
                            currentSubArrayName = cellValue;
                            subArrayList = new ArrayList<>();
                            currentRowIndex++; // Move to the header row of the subarray
                            headerRow = sheet.getRow(currentRowIndex);
                            continue;
                        }

                        if (insideSubArray) {
                            if (subArrayEndMarker.equals(cellValue)) {
                                if (currentSubArrayName != null && !subArrayList.isEmpty()) {
                                    Map<String, Object> lastItem = itemList.get(itemList.size() - 1);
                                    lastItem.put(currentSubArrayName, subArrayList);
                                }
                                insideSubArray = false;
                                continue;
                            }

                            if (!terminator.equals(cellValue)) {
                                Map<String, Object> subItem = new LinkedHashMap<>();
                                for (int i = 0; i < row.getLastCellNum(); i++) {
                                    Cell headerCell = headerRow.getCell(i);
                                    String header = headerCell != null ? headerCell.getStringCellValue().trim() : "";
                                    Cell dataCell = row.getCell(i);
                                    String value = dataCell != null ? dataCell.getStringCellValue().trim() : "";
                                    if (!header.isEmpty()  && !subArrayEndMarker.equals(value)) {
                                        subItem.put(header, value);
                                    }
                                }
                                if (!subItem.isEmpty() && !arrayEndMarker.equals(cellValue)) {
                                    subArrayList.add(subItem);
                                }
                                continue;
                            }
                        }

                        if (arrayEndMarker.equals(cellValue)) {
                            if (!itemList.isEmpty()) {
                                nestedElementData.put(arrayStartMarker, itemList);
                            }
                            insideArray = false;
                            continue;
                        }

                        if (!terminator.equals(cellValue) && !arrayEndMarker.equals(cellValue)) {
                            Map<String, Object> item = new LinkedHashMap<>();
                            for (int i = 0; i < row.getLastCellNum(); i++) {
                                // Usar arrayHeaders aquí para los elementos del array
                                String header = arrayHeaders.get(i);
                                Cell dataCell = row.getCell(i);
                                String value = dataCell != null ? dataCell.getStringCellValue().trim() : "";
                                if (header != null && !header.isEmpty() ) {
                                    item.put(header, value);
                                }
                            }
                            if (!item.isEmpty()) {
                                itemList.add(item);
                            }

                        }
                    }
                }
            }
        }

        if (nestedElementData != null) {
            jsonData.put(sectionName, nestedElementData);
        }
    }

    public String toJson() throws JsonProcessingException {
        ObjectMapper mapper = new ObjectMapper();
        return mapper.writerWithDefaultPrettyPrinter().writeValueAsString(jsonData);
    }

    public static void main(String[] args) {
        try {
            ExcelToJson excelToJson = new ExcelToJson("D:\\UserData\\Downloads\\demoTestingData\\pruenbba.xlsx");

            // Leer los datos generales
            excelToJson.readGeneralData();
            // Leer secciones específicas
            excelToJson.addNestedElement("Seccion1", "array-prueba", "subarray-1", "FIN-SUBARRAY", "FIN-ARRAY", "END");
            excelToJson.addNestedElement("Cornskm", "array-prueba2", "subarray-2", "FIN-SUBARRAY2", "FIN-ARRAY2", "END2");
            excelToJson.addElementWithPropertiesToJson("seccion3","END");

            // Convertir a JSON
            String jsonOutput = excelToJson.toJson();
            System.out.println(jsonOutput);

            // Cerrar el workbook
            excelToJson.workbook.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
