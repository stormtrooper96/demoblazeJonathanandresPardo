package com.faas.h2h_v2.screenplay.runners;

import com.faas.h2h_v2.screenplay.utils.BeforeSuite;
import com.faas.h2h_v2.screenplay.utils.SetUpEnvs;
import net.serenitybdd.cucumber.CucumberWithSerenity;
import org.junit.runner.Description;
import org.junit.runner.Runner;
import org.junit.runner.notification.RunNotifier;
import org.junit.runners.model.InitializationError;
import tech.tablesaw.api.Table;

import java.io.IOException;
import java.lang.annotation.Annotation;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class RunnerPersonalized extends Runner {

    private Class<CucumberWithSerenity> classValue;
    private CucumberWithSerenity cucumberWithSerenity;
    private TestDataHandler testDataHandler;

    public RunnerPersonalized(Class<CucumberWithSerenity> classValue) throws IOException, InitializationError {
        this.classValue = classValue;
        cucumberWithSerenity = new CucumberWithSerenity(classValue);

        // Inicializar TestDataHandler
        String excelFilePath = "path/to/your/excel/file.xlsx";
        String featureFilePath = "path/to/your/feature/file.feature";
        testDataHandler = new TestDataHandler(excelFilePath, featureFilePath);
    }

    @Override
    public Description getDescription() {
        return cucumberWithSerenity.getDescription();
    }

    private void runAnnotatedMethods(Class<?> annotation) throws InvocationTargetException, IllegalAccessException {
        if (!annotation.isAnnotation()) {
            return;
        }

        Method[] methods = this.classValue.getMethods();

        for (Method method : methods) {
            Annotation[] annotations = method.getAnnotations();
            for (Annotation item : annotations) {
                if (item.annotationType().equals(annotation)) {
                    method.invoke(null);
                    break;
                }
            }
        }
    }

    @Override
    public void run(RunNotifier notifier) {
        try {
            // Procesar los datos antes de ejecutar las pruebas
            testDataHandler.processTestData("Sheet1");

            runAnnotatedMethods(BeforeSuite.class);
            cucumberWithSerenity = new CucumberWithSerenity(classValue);
        } catch (Exception e) {
            System.out.println("ERROR runner");
            System.out.println(e);
            try {
                SetUpEnvs.main();
            } catch (IOException | ClassNotFoundException es) {
                System.out.println(es);
            }
        }
        cucumberWithSerenity.run(notifier);
        try {
            SetUpEnvs.main();
        } catch (IOException | ClassNotFoundException es) {
            System.out.println(es);
        }

        // Restaurar el archivo despu√©s de ejecutar las pruebas
        try {
            testDataHandler.restoreFeatureFile();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
